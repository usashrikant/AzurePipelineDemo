# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- master
- main
- develop
- feature/*
- bugfix/*
- hotfix/*

pool:
  name: 'Demo'
  artifaceName: drop
  isMain: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]

variables:
  config: 'Release'

stages:
- stage: 'Build'
  jobs:
  - job: 'BuildClient'
    pool:
      name: 'Test'
    steps:  
    - task: Npm@1
      displayName: 'Install Client Dependencies'
      inputs:
        command: 'install'
        workingDir: 'ClientApp'
    
    - task: Npm@1
      displayName: 'Build Client Application'
      inputs:
        command: 'custom'
        workingDir: 'ClientApp'
        customCommand: 'run build --prod'

    - task: Npm@1
      displayName: 'Test Client Application'
      inputs:
        command: 'custom'
        workingDir: 'ClientApp'
        customCommand: 'run test --watch=false'


  - job: 'BuildDotnet'
    # pool: 
    #  name: 'Demo'
    steps:  
    - script: dotnet build --configuration $(config)
      displayName: 'dotnet build $(config)'

    - script: echo 'Hello World'
      displayName: 'dotnet build $(config)'
   
    - task: DotNetCoreCLI@2
      inputs:
        command: 'publish'
        publishWebProjects: true
        arguments: '--configuration  $(config)  --output $(build.ArtifactStagingDirectory)/$(config)'
        zipAfterPublish: true

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'

- stage: 'DevDeployment'
  jobs:
    # Track deployments on the environment.
  - deployment: DeployWeb
    displayName: 'deploy Web App'
    pool:
      name: 'Demo'
    # Creates an environment if it doesn't exist.
    environment: 'Development'
    strategy:
      # Default deployment strategy, more coming...
      runOnce:
        deploy:
          steps:
          - task: AzureRmWebAppDeployment@4
            inputs:
              ConnectionType: 'AzureRM'
              azureSubscription: 'Azure Connection'
              appType: 'webAppLinux'
              WebAppName: 'bermtecdev'
              packageForLinux: '$(Pipeline.Workspace)/drop/$(config)/*.zip'

- stage: 'TestDeployment'
  jobs:
    # Track deployments on the environment.
  - deployment: DeployWeb
    displayName: 'deploy Web App'
    pool:
      name: 'Demo'
    # Creates an environment if it doesn't exist.
    environment: 'Test'
    strategy:
      # Default deployment strategy, more coming...
      runOnce:
        deploy:
          steps:
          - task: AzureRmWebAppDeployment@4
            inputs:
              ConnectionType: 'AzureRM'
              azureSubscription: 'Azure Connection'
              appType: 'webAppLinux'
              WebAppName: 'bermtecdev'
              packageForLinux: '$(Pipeline.Workspace)/drop/$(config)/*.zip'

- stage: 'StagingDeployment'
  jobs:
    # Track deployments on the environment.
  - deployment: DeployWeb
    displayName: 'deploy Web App'
    variables: 
      app: bermtecstaging
    pool:
      name: 'Demo'
    # Creates an environment if it doesn't exist.
    environment: 'Staging'
    strategy:
      # Default deployment strategy, more coming...
      runOnce:
        deploy:
          steps:
          - task: AzureRmWebAppDeployment@4
            inputs:
              ConnectionType: 'AzureRM'
              azureSubscription: 'Azure Connection'
              appType: 'webAppLinux'
              WebAppName: '$(app)'
              packageForLinux: '$(Pipeline.Workspace)/drop/$(config)/*.zip'

- stage: 'ProdDeployment'
  jobs:
    # Track deployments on the environment.
  - deployment: DeployWeb
    displayName: 'deploy Web App'
    condition: and(succeeded(), eq(variables.isMain, 'true'))
    variables: 
      app: bermtec
    pool:
      name: 'Demo'
    # Creates an environment if it doesn't exist.
    environment: 'Prod'
    strategy:
      # Default deployment strategy, more coming...
      runOnce:
        deploy:
          steps:
          - task: AzureRmWebAppDeployment@4
            inputs:
              ConnectionType: 'AzureRM'
              azureSubscription: 'Azure Connection'
              appType: 'webAppLinux'
              WebAppName: '$(app)'
              packageForLinux: '$(Pipeline.Workspace)/drop/$(config)/*.zip'